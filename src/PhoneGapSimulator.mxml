<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	layout="absolute"
	width="{Util.getWidth(app.edgeL, app.rotation, app.edgeD)}" 
	height="{app.height}" 
	autoExit="true" 
	scaleX="{app.scale}" scaleY="{app.scale}"
	showGripper="false" showTitleBar="false" showStatusBar="false"
	creationComplete="init()" xmlns:cc="cc.*"
	horizontalScrollPolicy="off" verticalScrollPolicy="off"
	invoke="onInvoke(event)">
	
	<mx:Script>
		<![CDATA[
			import nochump.util.zip.ZipFile;
			import com.nitobi.event.SkinEvent;
			import com.nitobi.view.UpdateAlert;
			import com.nitobi.managers.UpdateManager;
			import com.nitobi.event.MaskEvent;
			import com.nitobi.event.BlinkEvent;
			import gs.TweenLite;
			import com.nitobi.event.VibrateEvent;
			import com.nitobi.view.DebugPanel;
			import com.nitobi.Const;
			import com.nitobi.Util;
			import com.nitobi.PhoneGapSimulatorApp;
			import com.nitobi.CustomHost;
			import com.nitobi.view.URLModal;
			import mx.managers.PopUpManager;
			import mx.rpc.http.HTTPService;
			import mx.rpc.events.ResultEvent;
			import nochump.util.zip.ZipFile;
			import nochump.util.zip.ZipEntry;
			import flash.utils.IDataInput;
			import mx.controls.Alert;
			
			[Bindable]
			private var app:PhoneGapSimulatorApp = PhoneGapSimulatorApp.getInstance();
			
			[Bindable]
			private var vibrateFilter:BlurFilter = new BlurFilter(1, 5);
			
			private var viveLen:int = 0;
			
			[Bindable]
			private var blink:Boolean = false;
			
			[Bindable]
			private var blinkColor:uint;
			
			private var blinkLen:int = 0;
			
			private var invoked:Boolean = false;
			
			private function init():void
			{
				loadXML();
				app.html = pageLoader;
				debug();
				trace(this.nativeApplication.applicationID, nativeApplication.applicationDescriptor.children()[3]);
				
				// Linsteners
				app.addEventListener(VibrateEvent.VIBRATE_EVENT_START, onVibrate);
				app.addEventListener(BlinkEvent.BLINK_START, onBlink);
				app.addEventListener(SkinEvent.SKIN_CHANGE, onSkinChange);
				app.addEventListener(MaskEvent.REDRAW_MASK, onRedrawMask);
				
				app.checkForUpdate();
				app.updateManager.addEventListener(UpdateManager.EVENT_UPDATE_AVAILABLE,onUpdateAvailable);
				app.updateManager.addEventListener(UpdateManager.EVENT_UPDATE_READY,onUpdateReady);
				
 				if (!invoked) {
					var fileText:String = File.applicationDirectory.nativePath.replace(/\\/g, "/");
					app.currentURL = 'file://' + fileText + '/www/index.html';
 				}
				
				addEventListener(Event.CLOSE, onClose);
			}
			
			public function onInvoke(evt:InvokeEvent):void
			{
				invoked = true;
				trace("invoke: " + evt.arguments[0]);
				if (evt.arguments[0]) {
					var startDir:String = unzip(evt.arguments[0]);
					app.currentURL = 'file://' + startDir + 'index.html';
				}
			}
			
			
			// param: the path to a phonegap app archive. assumes it contains a www/ dir
			// returns: the path to the root directory of the unzipped phonegap app
			public function unzip(path:String):String
			{
				var zipInput:File = new File();
				var zipFile:ZipFile;
				
				zipInput = File.userDirectory.resolvePath(path);
				var appName:String = zipInput.name.substring(0, zipInput.name.indexOf("."));
				
				var stream:FileStream = new FileStream();  
				stream.open(zipInput,FileMode.READ);  
				   
				zipFile = new ZipFile(stream);  
				stream.close();
				
				// write each file to appdir/apps/name/...
				// then load index.html
				
				var applicationDirectoryPath:File = File.applicationDirectory;
				var nativePathToApplicationDirectory:String = applicationDirectoryPath.nativePath.toString();
				var appsPath:String = nativePathToApplicationDirectory + "/apps/";
				
				var firstEntry:ZipEntry = zipFile.entries[0];
				var rootDir:String = firstEntry.name.substring(0,firstEntry.name.indexOf("/"));
				trace("root: " + rootDir);
				
				for(var i:int = 0; i < zipFile.entries.length; i++) {
					var entry:ZipEntry = zipFile.entries[i];
					//trace(entry.name);
					if (!entry.isDirectory()) {
						// extract the entry's data from the zip
						var data:ByteArray = zipFile.getInput(entry);
						// expects a zipfile with just a single directory (rootDir)
						var file:File = File.applicationDirectory.resolvePath(appsPath + entry.name.replace(rootDir + "/", appName + "/"));
						var fileStream:FileStream = new FileStream(); 
						fileStream.open(file, FileMode.WRITE); 
						fileStream.writeBytes(data);
						fileStream.close();
					} else {
						trace(entry.name);
					}
				}
				
				// copy www/phonegap.js to apps/_appname_/phonegap.js
				
				var sourceFile:File = new File(nativePathToApplicationDirectory + "/www/phonegap.js");
				//sourceFile = sourceFile.resolvePath("www/phonegap.js");
				trace(sourceFile.nativePath);
				var destination:File = new File(appsPath + appName + "/phonegap.js");
				//destination = destination.resolvePath("apps/" + appName + "/phonegap.js");
				trace(destination.nativePath);
				
				if (sourceFile.copyTo(destination, true)) {
				    trace("Done.");
				}
				
				var startDir:String = appsPath + appName + "/";
				return startDir;
			}
			
			public function onUpdateAvailable(evt:Event):void
			{
				app.updateManager.downloadUpdate();
			}
			
			public function onUpdateReady(evt:Event):void
			{
				// TODO: Localize
				var alert:UpdateAlert = new UpdateAlert();
				alert.message = "An update has been downloaded. The application will now exit to install the update.";
				alert.titleText = "Update Ready";
				alert.addEventListener(Event.REMOVED,alertReadyClickHandler);
				alert.func = app.updateManager.installUpdate;
				PopUpManager.addPopUp(alert,this,true);
				PopUpManager.centerPopUp(alert);
			}
			
			public function alertReadyClickHandler(evt:Event):void
			{
				app.updateManager.installUpdate();
			}
			
			private function onRedrawMask(e:MaskEvent):void
			{
				redrawMask();
			}
			
			
			// Vibrate methods
			
			public function onVibrate(e:VibrateEvent):void
			{
				viveLen = e.data;
				addEventListener(Event.ENTER_FRAME, onEnterFrameVibrate);
			}
			
			private function onEnterFrameVibrate(e:Event):void
			{
				const vibeStrength:int = 20;
				
				vibrateFilter.blurX = Math.random()*vibeStrength;
				vibrateFilter.blurY = Math.random()*vibeStrength;
				filters = [vibrateFilter];
				
				viveLen--;
				if (viveLen <=0) removeVibrate();
			}
			
			private function removeVibrate():void
			{
				removeEventListener(Event.ENTER_FRAME, onEnterFrameVibrate);
				filters = [];
			}
			
			
			// Blink methods
			
			public function onBlink(e:BlinkEvent):void
			{
				blinkColor = e.data.color;
				blinkLen = e.data.count;
				addEventListener(Event.ENTER_FRAME, onEnterFrameBlink);
			}
			
			private function onEnterFrameBlink(e:Event):void
			{
				blink = !blink;
				
				blinkLen--;
				if (blinkLen <=0) removeBlink();
			}
			
			private function removeBlink():void
			{
				removeEventListener(Event.ENTER_FRAME, onEnterFrameBlink);
				blink = false;
			}
			
			public function loadXML():void
			{
				var xmlService:HTTPService = new HTTPService();
				xmlService.url = Const.SKIN_XML_URL;
				xmlService.resultFormat = 'e4x';
				xmlService.addEventListener(ResultEvent.RESULT, handleResult);
				// TODO: Error handling
				xmlService.send();
			}
			
			private function handleResult(e:ResultEvent):void 
			{
				var xml:XML = e.result as XML;
				Util.parseXML(xml);
				if (invoked)
					Util.changeSkin(this, 'Sony Ericsson Satio');
				else
					Util.changeSkin(this, 'iPhone');
				createContextMenu();
			}
			
						
			private function createContextMenu():void
			{
				var itemArray:Array = [];
				
				addMenuItemWithSeperator( Const.MENU_RELOAD );
				
				// Add Skin
				for each (var name:String in app.menuIdCollection)
				{	
					itemArray.push( app.menuSkin.addItem( new NativeMenuItem( name ) ) );
				}
				app.menuMain.addSubmenu( app.menuSkin, 'Skin' );
				
				for each (var item:NativeMenuItem in itemArray)
				{
					item.addEventListener(Event.SELECT, onSelect);
				}
				
				//Add Scale	
				itemArray = [];
				
				for each (var scale:Number in [1, 0.75, 0.5, 0.25])
				{	
					itemArray.push( app.menuScale.addItem( new NativeMenuItem( scale.toString() + 'x' ) ) );
				}
				app.menuMain.addSubmenu( app.menuScale, 'Scale' );
				
				for each (item in itemArray)
				{
					item.addEventListener(Event.SELECT, onScaleSelect);
				}
								
				// Add exit
				itemArray.push( app.menuMain.addItem( new NativeMenuItem( Const.MENU_EXIT ) ) );
				
				function addMenuItemWithSeperator( title:String):void
				{
					itemArray.push( app.menuMain.addItem( new NativeMenuItem( title ) ) );
					app.menuMain.addItem( new NativeMenuItem( '', true ) );
				}
				
				dragLayer.contextMenu = app.menuMain;
			}
			
			private function onSelect(e:Event):void
			{
				var selectedItem:NativeMenuItem = e.target as NativeMenuItem;
				var caption:String = selectedItem.label;
				
				switch (caption)
				{
					
					case Const.MENU_EXIT:
						exit();
						break;
					
					case Const.MENU_DEBUG:
						debug();
						break;
					
					case Const.MENU_RELOAD:
						pageLoader.reload()
						break;
					
					case Const.MENU_DEMO:
						app.currentURL = 'www/index.html';
						break;
						
					case Const.MENU_URL:
						openURLModal();
						break;
					
					default:						
						Util.changeSkin(this, caption);
						pageLoader.reload()
						break;
				}
			}
			
			private function onScaleSelect(e:Event):void
			{
				var selectedItem:NativeMenuItem = e.target as NativeMenuItem;
				var caption:String = selectedItem.label;
				Util.changeScale(this, caption);
			}
			
			private function openURLModal():void
			{
				var modal:URLModal = new URLModal;
				PopUpManager.addPopUp( modal, this, true);
				PopUpManager.centerPopUp(modal);
			}
			
			private function debug():void
			{
				if (!app.debug.opened)
				{
					app.debug = new DebugPanel;
					
				}
				
				app.debug.type = NativeWindowType.UTILITY;
				app.debug.open();
				redrawMask();
			}
			
			private function onClose(e:Event):void
			{
				exit();				
			}
			
			private function redrawMask():void
			{
				var r:Number = app.cornerRadius;
				var w:Number = app.horizontalOrientation ? app.screenHeight : app.screenWidth;
				var h:Number = app.horizontalOrientation ? app.screenWidth-app.headerHeight : app.screenHeight-app.headerHeight;
				displayMask.graphics.clear();
				displayMask.graphics.beginFill(0xffff00);
				
				displayMask.graphics.moveTo(0, h-r);
				displayMask.graphics.lineTo(0, r);
				displayMask.graphics.curveTo(0, 0, r, 0);
				displayMask.graphics.lineTo(w-r, 0);
				displayMask.graphics.curveTo(w, 0, w, r);
				
				displayMask.graphics.lineTo(w, h-r);
				displayMask.graphics.curveTo(w, h, w-r, h);
				
				displayMask.graphics.lineTo(r, h);
				displayMask.graphics.curveTo(0, h, 0, h-r);
				
			}
					
			private function onSkinChange(e:SkinEvent):void
			{
				const containerDir:String = 'assets/skin/SKINSTRING/main.png';
				const headerPortraitDir:String = 'assets/skin/SKINSTRING/header_portrait.png';
				const headerLandscapeDir:String = 'assets/skin/SKINSTRING/header_landscape.png';
				
				var skin:String = e.skinString;
				
				mainContainer.setStyle('backgroundImage', containerDir.replace(/SKINSTRING/, skin));
				headerPortrait.setStyle('backgroundImage', headerPortraitDir.replace(/SKINSTRING/, skin));
				headerLandscape.setStyle('backgroundImage', headerLandscapeDir.replace(/SKINSTRING/, skin));
			}
			
		]]>
	</mx:Script>
	
	<mx:Style source="assets/default.css" />
	
	<mx:Canvas id="adjustmentLayer"
		x="{width/2}" y="{height/2}" clipContent="false"
		horizontalScrollPolicy="off" verticalScrollPolicy="off">
	
		<mx:Canvas id="orientationLayer" 
			rotation="{app.rotation}" clipContent="false"
			horizontalScrollPolicy="off" verticalScrollPolicy="off">
			
			<mx:Canvas id="mainContainer"
				x="{-width/2 + (width/2-app.width/2)}" y="{-height/2}"
				width="{app.width}" height="{app.height}" clipContent="false"
				horizontalScrollPolicy="off" verticalScrollPolicy="off">
				
				<mx:Canvas id="dragLayer" 
					width="100%" height="100%" 
					mouseDown="stage.nativeWindow.startMove()"/>
			
				<mx:Canvas id="mainScreen"
					styleName="mainScreen" 
					clipContent="true"
					x="{app.screenX + app.screenOffsetX}" 
					y="{app.screenY + app.screenOffsetY}" 
					rotation="{app.screenRotation}"
					width="{(!app.horizontalOrientation ? app.screenWidth : app.screenHeight)}" 
					height="{(!app.horizontalOrientation ? app.screenHeight : app.screenWidth)}" >
					
					<mx:Canvas 
						id="headerPortrait"
						visible="{!app.horizontalOrientation}"
						height="{app.headerHeight}"
						width="100%" />
				
					<mx:Canvas 
						id="headerLandscape"
						visible="{app.horizontalOrientation}"
						height="{app.headerHeight}"
						width="100%" />
					
					<mx:Label 
						width="{mainScreen.width-20}"
						horizontalCenter="0" verticalCenter="0" 
						textAlign="center"
						htmlText="Loading {app.currentURL}"/>
						
					
					<mx:HTML id="pageLoader" verticalScrollPolicy="off" horizontalScrollPolicy="off"
						y="{app.headerHeight}"
						width="100%" height="100%" 
						visible="{!app.loading}"
						htmlHost="{app.host}"  
						userAgent="{app.userAgent}"
						location="{app.currentURL}" 
						mask="{displayMask}"
						scaleX="{app.screenScale}" scaleY="{app.screenScale}" 
						htmlDOMInitialize="app.domInitializer()"
						complete="app.loading=false;app.checkHeader()"
						locationChange="app.loading=true"/>
					
				
					<mx:UIComponent id="displayMask"  
						y="{app.headerHeight}"/>
					
					<mx:Canvas 
						backgroundColor="{blinkColor}"
						visible="{blink}" 
						width="100%" height="100%"/>
					
				</mx:Canvas>
					
				<mx:Button id="button" 
					alpha="0" toolTip="Reload"
					x="161" y="627"
					width="80" height="80"
					click="pageLoader.reload()"/>
				
			</mx:Canvas>
		</mx:Canvas>
	</mx:Canvas>
	
	
</mx:WindowedApplication>
